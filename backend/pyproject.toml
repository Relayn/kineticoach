[tool.poetry]
name = "kineticoach-backend"
version = "0.1.0"
description = "Real-time squat analysis backend for KinetiCoach Telegram Mini App"
authors = ["Alex <alex@example.com>"]
readme = "README.md"
packages = [{include = "app", from = "src"}]

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.117.1"
uvicorn = {extras = ["standard"], version = "^0.30.1"}
websockets = "^12.0"
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"
mediapipe = "0.10.11"
opencv-python-headless = "4.10.0.84"
protobuf = "3.20.3"
wsproto = "^1.2.0"
torch = { version = "^2.8.0", source = "pytorch-cpu" }
aiogram = "^3.22.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
ruff = "^0.5.0"
mypy = "^1.10.0"
bandit = "^1.7.9"
semgrep = "^1.68.0"
radon = "^6.0.1"
pip-audit = "^2.7.3"
detect-secrets = "^1.5.0"
pre-commit = "^3.7.1"
httpx = "0.28.1"
pytest-asyncio = "1.2.0"

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C90", "B"] # Стандартный набор + flake8-bugbear
ignore = []

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.bandit]
# Исключаем директорию с виртуальным окружением из сканирования
exclude_dirs = [".venv"]
# Пропускаем проверку B101 (использование assert), т.к. в тестах это нормально
skips = ["B101"]

[tool.pytest.ini_options]
# Указываем pytest, где именно искать тесты, чтобы он не запускал
# вспомогательные скрипты из других директорий (например, tools/).
testpaths = ["tests"]
